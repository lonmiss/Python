'''
一维数据
由对等关系的有序或无需数据构成，采用线性仿线性组织
-对应了列表、数组和集合的概念

二维数据
由多个一维数据构成，是一堆一维数据的组合形式
-表格是典型的二维数据
-其中表头是二维数据的一部分

多维数据
由一维或二维数据在新的维度上扩展形成的
高维数据
键值对
{
    "firstname":"tian",
    "lastname":"song",
    "address":
        {
            "streetaddr":"中关村南大街5号",
            "city"      :"北京市",
            "zipcode"   :"100081"
        },
    "professional":["computer networking","security"]
}

数据的操作周期
存储《-》表示《-》操作
数据存储    数据表示    数据操作
存储格式    数据类型    操作方式

一维数据的表示

1、如果数据间有序：使用列表类型
ls=[3.1398,3.1349,3.1376]
-列表类型可以表达一维有序数据
-我们可以用for循环遍历数据，进而对每个数据进行处理

2、如果数据间无需：使用集合类型
st={3.1398,3.1349,3.1376}
-集合类型可以表达一维无序数据

一维数据的存储
存储方式一：空格分隔
中国 美国 日本 德国 法国 英国 意大利
-使用一个或多个空格分隔进行存储，不换行
-缺点：数据中不能存储空格

存储方式二：逗号分隔
中国，美国，日本，德国，法国，英国，意大利
-使用英文半角分隔数据进行存储，不换行
-缺点：数据中不能有英文逗号

其他存储方式（一般建议采用其他符号）
-使用其他符号或符号组合分隔，建议采用特殊符号
-缺点：需要根据数据特点定义，通用性比较差

一维数据的处理
f=open("fname.txt")
txt=f.read()
ls=txt.split()#ls=txt.split("$")
print(ls)
f.close()
#['中国', '美国', '日本', '德国', '法国', '英国', '意大利']

一维数据的写入处理
采用空格分隔方式将数据写入文件
ls=['石家庄','天津','衡水','日照']
f=open("fname.txt",'a+')
f.write('%'.join(ls))
f.close()
txt=open("fname.txt")
f1=txt.read()
#txt=f.read("fname.txt","rb")
ls1=f1.split(" ")
ls2=f1.split("%")
print(ls1,end="\n")
print(ls2)

数据维度：一维、二维、多维、高维


二维数据的格式化和处理
-二维数据的表示
-CSV数据存储格式
-二维数据的存储
-二维数据的处理

二维数据的表示
使用列表类型
-列表类型可以表达二维数据
-使用二维列表
使用列表类型
[[3.1398,3.1349,3.1376],[3.1413,3.1404,3.1401]]
-使用两层for循环遍历每个元素
-外层列表中每个数据可以对应一行，也可以对应一列
数据维度是数据的组织形式
-一维数据：列表和集合类型
-二维数据：列表类型

CSV格式和二维数据存储
CSV数据存储格式：
CSV：Comma-Separated Values
-国际通用的一二维数据存储格式，一般以.csv扩展名
-每行一个一维数据，采用逗号分隔，无空行
-Excel软件可读入输出，一般编辑软件都可以产生
规定：
    1、如果某个元素缺失，逗号仍要保留
    2、二维数据的表头可以作为数据存储，也可另行存储
    3、逗号为英文半角逗号，逗号与数据之间无额外空格

    按行存，案列存？
-按行存或者按列存都可以，按程序决定
-一般索引习惯：ls[row][column],先行后列-
-根据一般索引习惯，外层列表每一元素是一行，按行存

二维数据存储
从CSV格式的文件中读入数据
fo=open("f328.txt")
ls=[]
for line in fo:
    line=line.replace("\n","")
    ls.append(line.split(","))
print(ls)
fo.close()

写入数据
ls=[[5,2,0],[6,6,6],[1,3,1,4],[9,9,9,9,9,9,9,9]]
f=open("f328~1.csv",'w')
for item in ls:
    f.write(','.join(item)+'\n')
f.close()

'''










